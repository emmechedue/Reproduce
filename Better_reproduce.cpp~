#include<cstdio>
#include<cstdlib>
#include<fstream>
#include<math.h>
#include<iostream>
#include<myrand.h>
#include<headers1.h>

using namespace std;

//**********Initializations**********
const int N0=4; //Initial number of bacteria in each cell
const int Nc0=2;//Initial number of cooperators in each cell
const int T=50000000; //Simulations steps
const int M=1000; //Number of cells
const double s=0.05; //Selection's strenght
const double p=10.; //Cooperators advantage
const double K=100.; //Carrying capacity

int main(){
    double Nc[M], Nd[M], x[M]; //Coop. #, Def. # and fraction of coop. ****In form of N[cell]
    double t; //time
    int i,l,m,emme=4*M;
    double Gamma[emme]; //The array with all the partial sums
    double **G; //Matrix with all the gammas for all the cells in form of G[cell][reaction]
    double r;
    ofstream file,file_fast;//Output file and a file where I'm not going to print everything
    const char filename[]="output.txt";
    const char fname[]="fast.txt";
    
    //*********Let's initialize all**********
    t=0.;
    for(i=0; i<M; i++){ //Initialize the matrices
        Nc[i]=Nc0;
        Nd[i]=N0-Nc0;
        x[i]=Nc[i]/(Nc[i]+Nd[i]);
    }
    G=new double* [M]; //Create the Mx4 gamma matrix
    for(i=0; i<M; i++){
        G[i]=new double[4];
    }
    initializeGamma(G,Gamma,M,Nc,Nd,x,p,s,K);
    //*******end of initialization*********
    
    file.open(filename,ios::out|ios::trunc); //Open the output's file and print the results for time=0
    file<<"#Results for the simulation reproducing the old results with"<<endl;
    file<<"# M="<<M<<"  T="<<T<<"  K="<<K<<"  s="<<s<<"  p="<<p<<"  N0="<<N0<<"  Nc0="<<Nc0<<endl;
    file<<"#Time  N   x"<<endl;
    myprint2(Nc,Nd,t,M,file);
    file_fast.open(fname,ios::out|ios::trunc); //Open the output's fast_file and print the results for time=0
    file_fast<<"#Results for the simulation reproducing the old results with"<<endl;
    file_fast<<"# M="<<M<<"  T="<<T<<"  K="<<K<<"  s="<<s<<"  p="<<p<<"  N0="<<N0<<"  Nc0="<<Nc0<<endl;
    file_fast<<"#Time  N   x"<<endl;
    myprint2(Nc,Nd,t,M,file_fast);
    
    //*****Start of the evolution***********
     
    for(i=1;i<T;i++){ 
        t=t+randlog(Gamma[emme-1]); //Samples the time at wich the next reaction happens;
        r=rand01()*Gamma[emme-1]; //Generates the random number to choose the reaction!
        //cout<<"check 1"<<endl;
        //r=Gamma[emme-1]-r;
        //cout<<"check 2"<<endl;
        l=search(Gamma,emme,r); //Finds the reaction
        //cout<<"check 3"<<endl;
        m=updateN(Nc, Nd,x,l); //Updates the variables at time i and returns the cell where the reaction happened
        //cout<<"check 4"<<endl;
        updateG(G,Gamma,m,Nc,Nd,x,p,s,K,emme); //Updates the G and the Gamma
        //cout<<"check 5"<<endl;
        //myprint2(Nc,Nd,t,M,file); //Prints N average and x average at time t
        //cout<<"check 6"<<endl;
        /*if((i%10)==0){
            cout<<"i is "<<i<<endl; //Just a check
            myprint2(Nc,Nd,t,M,file_fast); //Printing the results on file fast. To create a picture
        } */
        if((i%100)==0){ //Otherwise the file is really too messy!
            cout<<"i is "<<i<<endl; //Just a check
            myprint2(Nc,Nd,t,M,file_fast); //Printing the results on file fast. To create a picture
            }
    }
    
    file.close(); //Closing the files of output!
    file_fast.close();
    
    return 0;
}
